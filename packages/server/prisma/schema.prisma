// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthType {
  EMAIL
  GOOGLE
}


model User {
  id            String    @id @default(uuid())
  username      String    @unique
  name          String?
  email         String    @unique
  password      String?   // Hashed password for email/password auth
  googleId      String?   @unique // For Google Auth
  authType      AuthType  @default(EMAIL)
  isEmailVerified Boolean @default(false)
  profilePicUrl String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  videos        Video[]
  likes         Like[]
  comments      Comment[]
  passwordReset PasswordReset?
  emailVerification EmailVerification?
}

model PasswordReset {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model EmailVerification {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}


model Video {
  id             String     @id @default(uuid())
  title          String
  description    String?
  s3Key          String     @unique
  hlsManifestKey String?
  thumbnailUrl   String?
  duration       Int?       // Duration in seconds
  status         VideoStatus
  visibility     Visibility @default(PUBLIC)
  views          Int        @default(0)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  userId         String
  user           User       @relation(fields: [userId], references: [id])
  likes          Like[]
  comments       Comment[]
  tags           Tag[]
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  userId    String
  videoId   String
  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])

  @@unique([userId, videoId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  videoId   String
  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])
}

model Tag {
  id     String  @id @default(uuid())
  name   String  @unique
  videos Video[]
}

enum VideoStatus {
  PENDING
  PROCESSING
  READY
  FAILED
}

enum Visibility {
  PUBLIC
  PRIVATE
  UNLISTED
}